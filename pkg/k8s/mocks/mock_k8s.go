// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.go

// Package mock_k8s is a generated GoMock package.
package mock_k8s

import (
	reflect "reflect"

	k8s "github.com/ScienceSoft-Inc/integrity-sum/pkg/k8s"
	gomock "github.com/golang/mock/gomock"
	kubernetes "k8s.io/client-go/kubernetes"
)

// MockIKuberService is a mock of IKuberService interface.
type MockIKuberService struct {
	ctrl     *gomock.Controller
	recorder *MockIKuberServiceMockRecorder
}

// MockIKuberServiceMockRecorder is the mock recorder for MockIKuberService.
type MockIKuberServiceMockRecorder struct {
	mock *MockIKuberService
}

// NewMockIKuberService creates a new mock instance.
func NewMockIKuberService(ctrl *gomock.Controller) *MockIKuberService {
	mock := &MockIKuberService{ctrl: ctrl}
	mock.recorder = &MockIKuberServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIKuberService) EXPECT() *MockIKuberServiceMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockIKuberService) Connect() (*kubernetes.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(*kubernetes.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockIKuberServiceMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockIKuberService)(nil).Connect))
}

// GetDataFromDeployment mocks base method.
func (m *MockIKuberService) GetDataFromDeployment(kuberData *k8s.KubeData) (*k8s.DeploymentData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataFromDeployment", kuberData)
	ret0, _ := ret[0].(*k8s.DeploymentData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataFromDeployment indicates an expected call of GetDataFromDeployment.
func (mr *MockIKuberServiceMockRecorder) GetDataFromDeployment(kuberData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataFromDeployment", reflect.TypeOf((*MockIKuberService)(nil).GetDataFromDeployment), kuberData)
}

// GetDataFromK8sAPI mocks base method.
func (m *MockIKuberService) GetDataFromK8sAPI() (*k8s.DataFromK8sAPI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataFromK8sAPI")
	ret0, _ := ret[0].(*k8s.DataFromK8sAPI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataFromK8sAPI indicates an expected call of GetDataFromK8sAPI.
func (mr *MockIKuberServiceMockRecorder) GetDataFromK8sAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataFromK8sAPI", reflect.TypeOf((*MockIKuberService)(nil).GetDataFromK8sAPI))
}

// GetKubeData mocks base method.
func (m *MockIKuberService) GetKubeData() (*k8s.KubeData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubeData")
	ret0, _ := ret[0].(*k8s.KubeData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKubeData indicates an expected call of GetKubeData.
func (mr *MockIKuberServiceMockRecorder) GetKubeData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubeData", reflect.TypeOf((*MockIKuberService)(nil).GetKubeData))
}

// RolloutDeployment mocks base method.
func (m *MockIKuberService) RolloutDeployment(kuberData *k8s.KubeData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RolloutDeployment", kuberData)
	ret0, _ := ret[0].(error)
	return ret0
}

// RolloutDeployment indicates an expected call of RolloutDeployment.
func (mr *MockIKuberServiceMockRecorder) RolloutDeployment(kuberData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RolloutDeployment", reflect.TypeOf((*MockIKuberService)(nil).RolloutDeployment), kuberData)
}
