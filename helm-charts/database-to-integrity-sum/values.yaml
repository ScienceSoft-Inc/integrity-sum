global:
  postgresql:
    auth:
      ## @param auth.enablePostgresUser Assign a password to the "postgres" admin user. Otherwise, remote access will be blocked for this user
      ##
      enablePostgresUser: true
      ## @param auth.postgresPassword Password for the "postgres" admin user. Ignored if `auth.existingSecret` with key `postgres-password` is provided
      ##
      postgresPassword: ""
      ## @param auth.username Name for a custom user to create
      ##
      username: ""
      ## @param auth.password Password for the custom user to create. Ignored if `auth.existingSecret` with key `password` is provided
      ##
      password: ""
      ## @param auth.database Name for a custom database to create
      ##
      database: ""

postgresql:
  primary:
    # Enable security context
    podSecurityContext:
      enabled: false
      fsGroup: ""
    # Enable container security context
    containerSecurityContext:
      enabled: false
      runAsUser: "auto"
    service:
      ## PosgresSQL service type
      type: ClusterIP
      # clusterIP: None
      port: 5432

    persistence:
      # Enable PostgreSQL Primary data persistence using PVC
      enabled: true
      existingClaim: ""
      # mountPath: /bitnami/postgresql - default mountPath
      accessModes:
        - ReadWriteOnce
      size: 1Gi

    #Enable security context
    readReplicas:
      podSecurityContext:
        enabled: false
        fsGroup: ""
      containerSecurityContext:
        enabled: false
        runAsUser: "auto"

    # Enable init container that changes the owner and group of the persistent volume
    volumePermissions:
      enabled: false
      securityContext:
        runAsUser: "auto"
