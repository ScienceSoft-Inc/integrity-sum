// Code generated by MockGen. DO NOT EDIT.
// Source: release_storage.go

// Package mock_data is a generated GoMock package.
package mock_data

import (
	reflect "reflect"

	data "github.com/ScienceSoft-Inc/integrity-sum/internal/data"
	k8s "github.com/ScienceSoft-Inc/integrity-sum/pkg/k8s"
	gomock "github.com/golang/mock/gomock"
)

// MockIReleaseStorage is a mock of IReleaseStorage interface.
type MockIReleaseStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIReleaseStorageMockRecorder
}

// MockIReleaseStorageMockRecorder is the mock recorder for MockIReleaseStorage.
type MockIReleaseStorageMockRecorder struct {
	mock *MockIReleaseStorage
}

// NewMockIReleaseStorage creates a new mock instance.
func NewMockIReleaseStorage(ctrl *gomock.Controller) *MockIReleaseStorage {
	mock := &MockIReleaseStorage{ctrl: ctrl}
	mock.recorder = &MockIReleaseStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIReleaseStorage) EXPECT() *MockIReleaseStorageMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIReleaseStorage) Delete(nameDeployment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", nameDeployment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIReleaseStorageMockRecorder) Delete(nameDeployment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIReleaseStorage)(nil).Delete), nameDeployment)
}

// DeleteOldData mocks base method.
func (m *MockIReleaseStorage) DeleteOldData() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOldData")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOldData indicates an expected call of DeleteOldData.
func (mr *MockIReleaseStorageMockRecorder) DeleteOldData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOldData", reflect.TypeOf((*MockIReleaseStorage)(nil).DeleteOldData))
}

// Get mocks base method.
func (m *MockIReleaseStorage) Get(deploymentData *k8s.DeploymentData) (*data.Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", deploymentData)
	ret0, _ := ret[0].(*data.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIReleaseStorageMockRecorder) Get(deploymentData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIReleaseStorage)(nil).Get), deploymentData)
}

// IsExistDeploymentNameInDB mocks base method.
func (m *MockIReleaseStorage) IsExistDeploymentNameInDB(deploymentName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistDeploymentNameInDB", deploymentName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExistDeploymentNameInDB indicates an expected call of IsExistDeploymentNameInDB.
func (mr *MockIReleaseStorageMockRecorder) IsExistDeploymentNameInDB(deploymentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistDeploymentNameInDB", reflect.TypeOf((*MockIReleaseStorage)(nil).IsExistDeploymentNameInDB), deploymentName)
}

// PrepareQuery mocks base method.
func (m *MockIReleaseStorage) PrepareQuery(deploymentData *k8s.DeploymentData) (string, []any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareQuery", deploymentData)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]any)
	return ret0, ret1
}

// PrepareQuery indicates an expected call of PrepareQuery.
func (mr *MockIReleaseStorageMockRecorder) PrepareQuery(deploymentData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareQuery", reflect.TypeOf((*MockIReleaseStorage)(nil).PrepareQuery), deploymentData)
}
