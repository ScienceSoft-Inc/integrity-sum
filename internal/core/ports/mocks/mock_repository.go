// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/integrity-sum/internal/core/models"
	api "github.com/integrity-sum/pkg/api"
)

// MockIAppRepository is a mock of IAppRepository interface.
type MockIAppRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAppRepositoryMockRecorder
}

// MockIAppRepositoryMockRecorder is the mock recorder for MockIAppRepository.
type MockIAppRepositoryMockRecorder struct {
	mock *MockIAppRepository
}

// NewMockIAppRepository creates a new mock instance.
func NewMockIAppRepository(ctrl *gomock.Controller) *MockIAppRepository {
	mock := &MockIAppRepository{ctrl: ctrl}
	mock.recorder = &MockIAppRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAppRepository) EXPECT() *MockIAppRepositoryMockRecorder {
	return m.recorder
}

// IsExistDeploymentNameInDB mocks base method.
func (m *MockIAppRepository) IsExistDeploymentNameInDB(deploymentName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistDeploymentNameInDB", deploymentName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExistDeploymentNameInDB indicates an expected call of IsExistDeploymentNameInDB.
func (mr *MockIAppRepositoryMockRecorder) IsExistDeploymentNameInDB(deploymentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistDeploymentNameInDB", reflect.TypeOf((*MockIAppRepository)(nil).IsExistDeploymentNameInDB), deploymentName)
}

// MockIHashRepository is a mock of IHashRepository interface.
type MockIHashRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIHashRepositoryMockRecorder
}

// MockIHashRepositoryMockRecorder is the mock recorder for MockIHashRepository.
type MockIHashRepositoryMockRecorder struct {
	mock *MockIHashRepository
}

// NewMockIHashRepository creates a new mock instance.
func NewMockIHashRepository(ctrl *gomock.Controller) *MockIHashRepository {
	mock := &MockIHashRepository{ctrl: ctrl}
	mock.recorder = &MockIHashRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHashRepository) EXPECT() *MockIHashRepositoryMockRecorder {
	return m.recorder
}

// DeleteFromTable mocks base method.
func (m *MockIHashRepository) DeleteFromTable(nameDeployment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromTable", nameDeployment)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFromTable indicates an expected call of DeleteFromTable.
func (mr *MockIHashRepositoryMockRecorder) DeleteFromTable(nameDeployment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromTable", reflect.TypeOf((*MockIHashRepository)(nil).DeleteFromTable), nameDeployment)
}

// GetHashData mocks base method.
func (m *MockIHashRepository) GetHashData(dirFiles, algorithm string, deploymentData *models.DeploymentData) ([]*models.HashDataFromDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashData", dirFiles, algorithm, deploymentData)
	ret0, _ := ret[0].([]*models.HashDataFromDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHashData indicates an expected call of GetHashData.
func (mr *MockIHashRepositoryMockRecorder) GetHashData(dirFiles, algorithm, deploymentData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashData", reflect.TypeOf((*MockIHashRepository)(nil).GetHashData), dirFiles, algorithm, deploymentData)
}

// SaveHashData mocks base method.
func (m *MockIHashRepository) SaveHashData(allHashData []*api.HashData, deploymentData *models.DeploymentData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveHashData", allHashData, deploymentData)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveHashData indicates an expected call of SaveHashData.
func (mr *MockIHashRepositoryMockRecorder) SaveHashData(allHashData, deploymentData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHashData", reflect.TypeOf((*MockIHashRepository)(nil).SaveHashData), allHashData, deploymentData)
}
