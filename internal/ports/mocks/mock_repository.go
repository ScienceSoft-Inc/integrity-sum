// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	models "github.com/ScienceSoft-Inc/integrity-sum/internal/models"
	api "github.com/ScienceSoft-Inc/integrity-sum/pkg/api"
	gomock "github.com/golang/mock/gomock"
)

// MockIHashStorage is a mock of IHashStorage interface.
type MockIHashStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIHashStorageMockRecorder
}

// MockIHashStorageMockRecorder is the mock recorder for MockIHashStorage.
type MockIHashStorageMockRecorder struct {
	mock *MockIHashStorage
}

// NewMockIHashStorage creates a new mock instance.
func NewMockIHashStorage(ctrl *gomock.Controller) *MockIHashStorage {
	mock := &MockIHashStorage{ctrl: ctrl}
	mock.recorder = &MockIHashStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHashStorage) EXPECT() *MockIHashStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIHashStorage) Create(allHashData []*api.HashData, deploymentData *models.DeploymentData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", allHashData, deploymentData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIHashStorageMockRecorder) Create(allHashData, deploymentData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIHashStorage)(nil).Create), allHashData, deploymentData)
}

// Get mocks base method.
func (m *MockIHashStorage) Get(dirPath string, deploymentData *models.DeploymentData) ([]*models.HashData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", dirPath, deploymentData)
	ret0, _ := ret[0].([]*models.HashData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIHashStorageMockRecorder) Get(dirPath, deploymentData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIHashStorage)(nil).Get), dirPath, deploymentData)
}

// MockIReleaseStorage is a mock of IReleaseStorage interface.
type MockIReleaseStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIReleaseStorageMockRecorder
}

// MockIReleaseStorageMockRecorder is the mock recorder for MockIReleaseStorage.
type MockIReleaseStorageMockRecorder struct {
	mock *MockIReleaseStorage
}

// NewMockIReleaseStorage creates a new mock instance.
func NewMockIReleaseStorage(ctrl *gomock.Controller) *MockIReleaseStorage {
	mock := &MockIReleaseStorage{ctrl: ctrl}
	mock.recorder = &MockIReleaseStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIReleaseStorage) EXPECT() *MockIReleaseStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIReleaseStorage) Create(deploymentData *models.DeploymentData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", deploymentData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIReleaseStorageMockRecorder) Create(deploymentData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIReleaseStorage)(nil).Create), deploymentData)
}

// Delete mocks base method.
func (m *MockIReleaseStorage) Delete(nameDeployment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", nameDeployment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIReleaseStorageMockRecorder) Delete(nameDeployment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIReleaseStorage)(nil).Delete), nameDeployment)
}

// DeleteOldData mocks base method.
func (m *MockIReleaseStorage) DeleteOldData() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOldData")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOldData indicates an expected call of DeleteOldData.
func (mr *MockIReleaseStorageMockRecorder) DeleteOldData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOldData", reflect.TypeOf((*MockIReleaseStorage)(nil).DeleteOldData))
}

// Get mocks base method.
func (m *MockIReleaseStorage) Get(deploymentData *models.DeploymentData) (*models.Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", deploymentData)
	ret0, _ := ret[0].(*models.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIReleaseStorageMockRecorder) Get(deploymentData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIReleaseStorage)(nil).Get), deploymentData)
}

// IsExistDeploymentNameInDB mocks base method.
func (m *MockIReleaseStorage) IsExistDeploymentNameInDB(deploymentName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistDeploymentNameInDB", deploymentName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExistDeploymentNameInDB indicates an expected call of IsExistDeploymentNameInDB.
func (mr *MockIReleaseStorageMockRecorder) IsExistDeploymentNameInDB(deploymentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistDeploymentNameInDB", reflect.TypeOf((*MockIReleaseStorage)(nil).IsExistDeploymentNameInDB), deploymentName)
}
